apply plugin: 'com.android.application'

def cfg = rootProject.ext.configuration;
def libs = rootProject.ext.libraries;
def testLibs = rootProject.ext.testLibraries

android {
    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion
    defaultConfig {
        applicationId cfg.package
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
        versionCode cfg.version_code
        versionName cfg.version_name

        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {

        }
    }

//    productFlavors {
//        devBackend {
//            applicationIdSuffix ".dev"
//            resValue "string", "app_name", "MVVM Dev"
//            buildConfigField "String", "BASE_URL", "\"github Base URL\""
//        }
//        productionBackend {
//            resValue "string", "app_name", "MVVM Production"
//            buildConfigField "String", "BASE_URL", "\"github Base URL\""
//        }
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":data")

    implementation libs.supportAppCompatV7
    implementation libs.supportDesign
    implementation libs.supportRecyclerView
    implementation libs.supportCardView
    implementation libs.supportTransition

    // dagger
    implementation libs.dagger
    implementation libs.daggerAndroid
    implementation libs.daggerSupport
    annotationProcessor libs.daggerCompiler
    annotationProcessor libs.daggerAndroidCompiler

    // android utils
    implementation libs.androidUtils_core
    implementation libs.androidUtils_realm
    implementation libs.androidUtils_glide
    implementation libs.androidUtils_navigation

    // event bus
    implementation libs.eventBus

    // retrofit
    implementation libs.retrofitConverterGson
    implementation libs.retrofitConverterScalars

    // rx permission
    implementation libs.rxPermission

    // leak canary
    debugImplementation libs.leakCanary
    releaseImplementation libs.leakCanaryNoOp

    // lombok
    compileOnly libs.lombok
    annotationProcessor libs.lombok

    implementation libs.stream

    // testing
    testImplementation project(":test_utils")

    androidTestImplementation testLibs.espresso_core

    // dagger test
    testAnnotationProcessor libs.daggerCompiler
    testAnnotationProcessor libs.daggerAndroidCompiler

    testImplementation testLibs.mockito
    testImplementation testLibs.jUnit
    testImplementation testLibs.powerMockito
    testImplementation testLibs.powerMockJUnit
    testImplementation testLibs.powerMockRule
    testImplementation testLibs.powerMockClassLoading
    testImplementation testLibs.robolectric

    // to fix Realm error Caused by: javassist.NotFoundException: rx.Observable
    testImplementation 'io.reactivex:rxjava:1.2.9'
}
